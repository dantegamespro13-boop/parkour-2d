<!DOCTYPE html>
<html lang="es">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Parkour 2D Pro - Lobby</title>
<style>
html,body{margin:0;padding:0;overflow:hidden;width:100%;height:100%;font-family:sans-serif;background:#111;}
#canvas{display:block;}
#menu,#usernameScreen,#difficultyScreen,#gameoverScreen,#leaderboard{
  position:absolute;top:0;left:0;width:100%;height:100%;
  display:flex;justify-content:center;align-items:center;flex-direction:column;
  background:rgba(0,0,0,0.85); color:white;
}
input{padding:10px;font-size:20px;margin:10px;border-radius:8px;border:none;text-align:center;}
.btn{padding:15px 50px;margin:10px;font-size:24px;color:white;background:linear-gradient(145deg,#444,#222);border:none;border-radius:15px;cursor:pointer;box-shadow:0 5px 15px rgba(0,0,0,0.5);transition:0.2s;}
.btn:hover{background:linear-gradient(145deg,#666,#333);transform:scale(1.05);}
.controls{position:absolute;bottom:30px;display:flex;justify-content:center;width:100%;gap:20px;}
.control-btn{width:80px;height:80px;background:#222;border-radius:50%;color:white;font-size:24px;display:flex;justify-content:center;align-items:center;user-select:none;}
h1,h2{margin:10px;}
</style>
</head>
<body>
<canvas id="canvas"></canvas>

<div id="menu">
  <h1>Parkour 2D Pro</h1>
  <button class="btn" id="playBtn">Play</button>
  <button class="btn" id="fullscreenBtn">Pantalla Completa</button>
</div>

<div id="usernameScreen" style="display:none;">
  <h2>Ingresa tu nombre único</h2>
  <input type="text" id="usernameInput" placeholder="Tu nombre">
  <button class="btn" id="startBtn">Continuar</button>
  <p id="nameError" style="color:red;"></p>
</div>

<div id="difficultyScreen" style="display:none;">
  <h2>Selecciona la dificultad</h2>
  <button class="btn" id="easyBtn">Fácil</button>
  <button class="btn" id="mediumBtn">Medio</button>
  <button class="btn" id="hardBtn">Difícil</button>
</div>

<div id="gameoverScreen" style="display:none;">
  <h1>¡Game Over!</h1>
  <button class="btn" id="restartBtn">Reiniciar</button>
  <button class="btn" id="showLeaderboardBtn">Leaderboard</button>
  <button class="btn" id="backToMenuBtn">Volver</button>
</div>

<div id="leaderboard" style="display:none;">
  <h2>Leaderboard (<span id="lbDifficulty">Medio</span>)</h2>
  <ol id="scoreList"></ol>
  <button class="btn" id="backBtn">Volver</button>
</div>

<div class="controls" id="mobileControls" style="display:none;">
  <div class="control-btn" id="leftBtn">◀</div>
  <div class="control-btn" id="jumpBtn">▲</div>
  <div class="control-btn" id="rightBtn">▶</div>
</div>

<script>
// --- Canvas ---
const canvas=document.getElementById('canvas');
const ctx=canvas.getContext('2d');
canvas.width=window.innerWidth;
canvas.height=window.innerHeight;

// --- Variables ---
let gameStarted=false, gameOver=false, username="", difficulty="medium";
let isMobile=/Mobi|Android|iPad|iPhone/i.test(navigator.userAgent);
let player={}, gravity=1, platforms=[], particles=[], platformCount=0;
let startTime=0;

let levelThemes=[
  {wood:"#8B4513",stone:"#808080",metal:"#cccccc",lava:"#ff4500"},
  {wood:"#4B0082",stone:"#483D8B",metal:"#00CED1",lava:"#FF6347"},
  {wood:"#228B22",stone:"#006400",metal:"#32CD32",lava:"#FF4500"}
];
let currentTheme=0;
const materials={ wood:{pattern:'stripe'}, stone:{pattern:'dots'}, metal:{pattern:'grid'}, lava:{pattern:'fire'} };

// --- Nombre guardado ---
const storedName = localStorage.getItem("parkourUsername");
if(storedName){username=storedName; document.getElementById('menu').style.display='none'; showDifficulty();}

// --- Funciones ---
function addPlatform(x,y,mat="wood",move=false,type="normal"){
  let color=levelThemes[currentTheme][mat];
  platforms.push({x,y,w:150,h:20,material:{color,pattern:materials[mat].pattern},type,move:move,direction:1});
  platformCount++;
  if(platformCount%10===0){currentTheme=(currentTheme+1)%levelThemes.length;}
}

function resetGame(){
  startTime=Date.now(); 
  player={x:100,y:canvas.height-150,w:50,h:50,vy:0,onGround:false,color:"#0000ff"};
  platforms=[]; platformCount=0; currentTheme=0;
  addPlatform(player.x-50,player.y+player.h,"stone");
  for(let i=0;i<3;i++) addPlatform(player.x+200+i*250,canvas.height-100-Math.random()*50,["wood","metal"][i%2]);
  particles=[]; gameOver=false; gameStarted=true;
}

function addParticle(x,y,color){particles.push({x,y,vx:(Math.random()-0.5)*4,vy:-Math.random()*4,life:30,color});}
function drawParticles(){for(let i=particles.length-1;i>=0;i--){let pt=particles[i];ctx.fillStyle=pt.color;ctx.fillRect(pt.x,pt.y,4,4);pt.x+=pt.vx;pt.y+=pt.vy;pt.vy+=0.2;pt.life--;if(pt.life<=0)particles.splice(i,1);}}
function drawPlatform(p){ctx.fillStyle=p.material.color;ctx.fillRect(p.x,p.y,p.w,p.h);
  switch(p.material.pattern){
    case 'stripe': ctx.strokeStyle="#654321"; for(let i=0;i<p.w;i+=10){ctx.beginPath();ctx.moveTo(p.x+i,p.y);ctx.lineTo(p.x+i,p.y+p.h);ctx.stroke();} break;
    case 'dots': ctx.fillStyle="#555"; for(let i=5;i<p.w;i+=15) for(let j=5;j<p.h;j+=15) ctx.fillRect(p.x+i,p.y+j,3,3); break;
    case 'grid': ctx.strokeStyle="#999"; for(let i=0;i<p.w;i+=20) for(let j=0;j<p.h;j+=10) ctx.strokeRect(p.x+i,p.y+j,10,5); break;
    case 'fire': ctx.fillStyle="#ff8c00"; ctx.fillRect(p.x,p.y,p.w,p.h/2); break;
  }
}

// --- Leaderboard por dificultad ---
function saveScore(name,score){
  let allScores=JSON.parse(localStorage.getItem("leaderboards")||"{}");
  if(!allScores[difficulty]) allScores[difficulty]=[];
  let existing=allScores[difficulty].find(s=>s.name===name);
  if(existing){if(score>existing.score) existing.score=score;}else{allScores[difficulty].push({name,score});}
  allScores[difficulty].sort((a,b)=>b.score-a.score);
  localStorage.setItem("leaderboards",JSON.stringify(allScores));
}
function showLeaderboardScreen(){
  document.getElementById('gameoverScreen').style.display='none';
  document.getElementById('leaderboard').style.display='flex';
  document.getElementById('lbDifficulty').textContent=difficulty.charAt(0).toUpperCase()+difficulty.slice(1);
  let allScores=JSON.parse(localStorage.getItem("leaderboards")||"{}");
  let scores=allScores[difficulty]||[];
  const list=document.getElementById('scoreList'); list.innerHTML="";
  scores.slice(0,10).forEach((s,i)=>{let li=document.createElement("li"); li.textContent=`${i+1}. ${s.name}: ${s.score.toFixed(2)}s`; list.appendChild(li);});
}

// --- Controles ---
let keys={};
if(!isMobile){
  document.addEventListener('keydown', e=>{if(['ArrowLeft','ArrowRight','Space','ArrowUp','KeyA','KeyD'].includes(e.code)) keys[e.code]=true;});
  document.addEventListener('keyup', e=>{if(['ArrowLeft','ArrowRight','Space','ArrowUp','KeyA','KeyD'].includes(e.code)) keys[e.code]=false;});
}else{
  document.getElementById('mobileControls').style.display='flex';
  document.getElementById('leftBtn').addEventListener('touchstart',()=>keys['ArrowLeft']=true);
  document.getElementById('leftBtn').addEventListener('touchend',()=>keys['ArrowLeft']=false);
  document.getElementById('rightBtn').addEventListener('touchstart',()=>keys['ArrowRight']=true);
  document.getElementById('rightBtn').addEventListener('touchend',()=>keys['ArrowRight']=false);
  document.getElementById('jumpBtn').addEventListener('touchstart',()=>keys['Space']=true);
  document.getElementById('jumpBtn').addEventListener('touchend',()=>keys['Space']=false);
}

// --- Generar plataformas ---
function generatePlatform(){
  let last=platforms[platforms.length-1];
  let newX=last.x+200+Math.random()*100;
  let newY=canvas.height-100-Math.random()*150;
  let mat=["wood","stone","metal","lava"][Math.floor(Math.random()*4)];
  let type=Math.random()<difficultySettings().puzzleChance?"puzzle":"normal";
  let move=Math.random()<0.15 && mat!="lava"; addPlatform(newX,newY,mat,move,type);
}

// --- Game Over ---
function triggerGameOver(){
  gameOver=true;
  gameStarted=false;
  let elapsed = (Date.now() - startTime)/1000;
  saveScore(username, elapsed);
  document.getElementById('gameoverScreen').style.display='flex';
}

// --- Loop ---
function animate(){
  if(!gameStarted) return; requestAnimationFrame(animate);
  ctx.clearRect(0,0,canvas.width,canvas.height);

  const lavaHeight=100;
  const gradient=ctx.createLinearGradient(0,canvas.height-lavaHeight,0,canvas.height);
  gradient.addColorStop(0,"#ff4500"); gradient.addColorStop(0.5,"#ff8c00"); gradient.addColorStop(1,"#ff0000");
  ctx.fillStyle=gradient; ctx.fillRect(0,canvas.height-lavaHeight,canvas.width,lavaHeight);
  for(let i=0;i<canvas.width;i+=20){ctx.fillStyle="#ff6600"; ctx.fillRect(i,canvas.height-lavaHeight+Math.sin(Date.now()/200+i/20)*10,10,10);}

  if((keys['Space']||keys['ArrowUp'])&&player.onGround){player.vy=-20;player.onGround=false;for(let i=0;i<5;i++) addParticle(player.x+player.w/2,player.y+player.h,"#fff");}
  if(keys['ArrowLeft']||keys['KeyA']) player.x-=5;
  if(keys['ArrowRight']||keys['KeyD']) player.x+=5;
  player.vy+=gravity; player.y+=player.vy;

  player.onGround=false;
  let scrollSpeed = difficultySettings().speed + 1.5; 
  platforms.forEach(p=>{
    if(p.move){p.x+=0.5*p.direction;if(p.x<0||p.x+p.w>canvas.width)p.direction*=-1;}
    p.x-=scrollSpeed;
    if(player.x<p.x+p.w && player.x+player.w>p.x && player.y+player.h>p.y && player.y+player.h< p.y+player.h+player.vy){
      player.y=p.y-player.h; player.vy=0; player.onGround=true;
      if(p.type==="lava") triggerGameOver();
    }
    drawPlatform(p);
  });
  platforms=platforms.filter(p=>p.x+p.w>0);
  while(platforms.length<7) generatePlatform();

  ctx.fillStyle=player.color; ctx.fillRect(player.x,player.y,player.w,player.h);
  drawParticles();
  if(player.y+player.h>=canvas.height) triggerGameOver();

  let elapsed = (Date.now() - startTime)/1000;
  ctx.fillStyle="white"; ctx.font="24px Arial"; ctx.fillText("Jugador: "+username,20,40);
  ctx.fillText("Tiempo: "+elapsed.toFixed(2)+"s",20,70);
}

// --- Dificultad ---
function showDifficulty(){document.getElementById('difficultyScreen').style.display='flex';}
function difficultySettings(){switch(difficulty){
  case "easy": return {speed:1.5,puzzleChance:0.05};
  case "medium": return {speed:2.5,puzzleChance:0.15};
  case "hard": return {speed:4,puzzleChance:0.3};
  default: return {speed:2.5,puzzleChance:0.15};
}}

// --- Botones ---
document.getElementById('playBtn').addEventListener('click',()=>{
  document.getElementById('menu').style.display='none';
  if(storedName){showDifficulty();}else{document.getElementById('usernameScreen').style.display='flex';}
});
document.getElementById('fullscreenBtn').addEventListener('click',()=>{
  if(canvas.requestFullscreen){canvas.requestFullscreen();}
  else if(canvas.webkitRequestFullscreen){canvas.webkitRequestFullscreen();}
  else if(canvas.msRequestFullscreen){canvas.msRequestFullscreen();}
});
document.getElementById('startBtn').addEventListener('click',()=>{
  const inputName=document.getElementById('usernameInput').value.trim();
  if(!inputName){document.getElementById('nameError').textContent="Debes ingresar un nombre."; return;}
  username=inputName; localStorage.setItem("parkourUsername",username);
  document.getElementById('usernameScreen').style.display='none';
  showDifficulty();
});
document.getElementById('easyBtn').addEventListener('click',()=>{difficulty="easy"; startGame();});
document.getElementById('mediumBtn').addEventListener('click',()=>{difficulty="medium"; startGame();});
document.getElementById('hardBtn').addEventListener('click',()=>{difficulty="hard"; startGame();});
function startGame(){document.getElementById('difficultyScreen').style.display='none'; resetGame(); animate();}
document.getElementById('restartBtn').addEventListener('click',()=>{document.getElementById('gameoverScreen').style.display='none'; resetGame(); animate();});
document.getElementById('showLeaderboardBtn').addEventListener('click',showLeaderboardScreen);
document.getElementById('backBtn').addEventListener('click',()=>{document.getElementById('leaderboard').style.display='none'; showDifficulty();});
document.getElementById('backToMenuBtn').addEventListener('click',()=>{document.getElementById('gameoverScreen').style.display='none'; document.getElementById('menu').style.display='flex';});
window.addEventListener('resize',()=>{canvas.width=window.innerWidth; canvas.height=window.innerHeight;});
</script>
</body>
</html>
